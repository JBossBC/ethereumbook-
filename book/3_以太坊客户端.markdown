# 以太坊客户端

以太坊客户端是一种软件应用程序，它实现了以太坊规范并通过对等网络与其他以太坊客户端进行通信。如果不同的以太坊客户端遵守参考规范和标准化通信协议，则它们可以互操作。虽然这些不同的客户端由不同的团队和不同的编程语言实现，但它们都“使用”相同的协议并遵循相同的规则。因此，它们都可以用于操作同一个以太坊网络并与之交互。

以太坊是一个开源项目，所有主要客户端的源代码都可以在开源许可（例如 LGPL v3.0）下获得，可以免费下载和用于任何目的。不过，开源不仅仅意味着免费使用。这也意味着以太坊是由一个开放的志愿者社区开发的，任何人都可以修改。更多的眼睛意味着更值得信赖的代码。

以太坊由称为“黄皮书”的正式规范定义（参见 [参考资料]）。

例如，这与没有以任何正式方式定义的比特币形成对比。比特币的“规范”是比特币核心的参考实现，以太坊的规范记录在一篇结合了英语和数学（正式）规范的论文中。除了各种以太坊改进提案之外，这个正式规范还定义了以太坊客户端的标准行为。随着以太坊的重大变化，黄皮书会定期更新。

由于以太坊明确的正式规范，以太坊客户端有许多独立开发但可互操作的软件实现。以太坊在网络上运行的实现比任何其他区块链都更加多样化，这通常被认为是一件好事。事实上，例如，它已证明自己是防御网络攻击的绝佳方法，因为利用特定客户端的实施策略只会在开发人员修补漏洞时给开发人员带来麻烦，而其他客户端保持网络运行几乎不受影响.


## 以太坊网络

存在各种基于以太坊的网络，它们在很大程度上符合以太坊黄皮书中定义的正式规范，但它们可能会或可能不会相互操作。

这些基于以太坊的网络包括 Ethereum、Ethereum Classic、Ella、Expanse、Ubiq、Musicoin 等。虽然大多数在协议级别兼容，但这些网络通常具有需要以太坊客户端软件的维护者进行小的更改以支持每个网络的功能或属性。因此，并非每个版本的以太坊客户端软件都运行每个基于以太坊的区块链。

目前，以太坊协议有六个主要的实现，用六种不同的语言编写：

+ Parity，用Rust编写
+ Geth,用golang编写
+ cpp-ethereum,用c++编写
+ pyethereum,用python编写
+ mantis,用scala编写
+ harmony,用java编写


在本节中，我们将了解两个最常见的客户端，Parity 和 Geth。我们将展示如何使用每个客户端设置节点，并探索它们的一些命令行选项和应用程序编程接口 (API)。

## 使用以太坊是否需要运行全节点

区块链的健康、弹性和抗审查能力取决于它们拥有许多独立运营且地理上分散的完整节点。每个全节点都可以帮助其他新节点获取区块数据以引导其运行，并为运营商提供对所有交易和合约的权威和独立验证。

但是，运行全节点会产生硬件资源和带宽成本。一个全节点最多可以下载 300 GB 的数据（截至 2021 年 3 月，取决于客户端配置）并将其存储在本地硬盘上。随着新交易和区块的添加，这种数据负担每天都在迅速增加。我们在完整节点的硬件要求中更详细地讨论了这个主题。

以太坊开发不需要在实时主网网络上运行的完整节点。您几乎可以使用测试网节点（将您连接到较小的公共测试区块链之一）、本地私有区块链（例如 Ganache）或服务提供商（例如 Infura）提供的基于云的以太坊客户端来完成您需要做的所有事情.

您还可以选择运行远程客户端，该客户端不存储区块链的本地副本或验证块和交易。这些客户端提供钱包的功能，可以创建和广播交易。远程客户端可用于连接到现有网络，例如您自己的完整节点、公共区块链、公共或许可（权威证明）测试网或私有本地区块链。实际上，您可能会使用远程客户端（如 MetaMask、Emerald Wallet、MyEtherWallet 或 MyCrypto）作为在所有不同节点选项之间切换的便捷方式。

术语“远程客户端”和“钱包”可互换使用，但存在一些差异。通常，除了钱包的交易功能外，远程客户端还提供 API（例如 web3.js API）。

**不要将以太坊中远程钱包的概念与轻客户端（类似于比特币中的简化支付验证客户端）的概念混淆。轻客户端验证块头并使用 Merkle 证明来验证区块链中包含的交易并确定它们的影响，从而为它们提供与完整节点类似的安全级别。相反，以太坊远程客户端不验证块头或交易。他们完全信任一个完整的客户端来让他们访问区块链，因此失去了重要的安全性和匿名性保证。您可以使用自己运行的完整客户端来缓解这些问题。**

### 全节点的优势和劣势

选择运行完整节点有助于您连接到的网络的运行，但也会给您带来一些轻度至中度的成本。让我们来看看一些优点和缺点。

+ 优势:

    + 支持基于以太坊的网络的弹性和审查阻力
    + 权威地验证所有交易
    + 无需中介即可与公共区块链上的任何合约进行交互
    + 无需中介即可直接将合约部署到公共区块链中
    + 可以离线查询（只读）区块链状态（账户、合约等）
    + 可以在不让第三方知道您正在阅读的信息的情况下查询区块链

+ 劣势:

    + 需要大量且不断增长的硬件和带宽资源
    + 首次启动时可能需要几天时间才能完全同步
    + 必须维护、升级并保持在线以保持同步

### 公共测试网的优点和缺点

无论您是否选择运行完整节点，您都可能希望运行公共测试网节点。让我们看看使用公共测试网的一些优点和缺点。

+ 优势

    + 与主网相比，测试网节点需要同步和存储的数据要少得多——大约 75 GB，具体取决于网络。
    + 测试网节点可以在更短的时间内完全同步。
    + 部署合约或进行交易需要测试以太币，它没有任何价值，可以从几个“水龙头”免费获得。
    + 测试网是具有许多其他用户和合约的公共区块链，“实时”运行。

+ 劣势

     + 你不能在测试网上使用“真”钱；它在测试以太上运行。因此，您无法针对真正的对手测试安全性，因为没有任何风险。
     + 公共区块链的某些方面无法在测试网上进行实际测试。例如，交易费用虽然是发送交易所必需的，但在测试网上不是考虑因素，因为 gas 是免费的。此外，测试网不会像公共主网有时那样经历网络拥塞。


### 本地模拟区块链的优点和缺点


对于许多测试目的，最好的选择是启动一个单实例私有区块链。 Ganache（以前称为 testrpc）是最流行的本地区块链模拟之一，您可以在没有任何其他参与者的情况下与之交互。它具有公共测试网的许多优点和缺点，但也有一些差异。

+ 优点

    + 没有同步，磁盘上基本上没有数据，你自己挖第一个区块
    + 无需获取测试以太币,Ganache使用已经持有用于测试的以太币的账户进行初始化
    + 没有其他用户，只有你自己
    + 没有其他合约，只有你在启动后部署的合约，除非你使用分叉现有以太坊节点的选项

## 运行一个以太坊客户端

如果你有时间和资源，你应该尝试运行一个完整的节点，即使只是为了了解更多关于这个过程的信息。在本节中，我们将介绍如何下载、编译和运行以太坊客户端 Parity 和 Geth。这需要熟悉在操作系统上使用命令行界面。值得安装这些客户端，无论您选择将它们作为完整节点、测试网节点还是作为本地私有区块链的客户端运行。

### 对于一个全节点的硬件需求

在我们开始之前，您应该确保您的计算机有足够的资源来运行以太坊全节点。您将需要至少 300 GB 的磁盘空间来存储以太坊区块链的完整副本。如果您还想在以太坊测试网上运行一个完整节点，则至少需要额外的 75 GB。下载 375 GB 的区块链数据可能需要很长时间，因此建议您在快速的互联网连接上工作。

同步以太坊区块链的输入/输出 (I/O) 非常密集。最好有固态硬盘 (SSD)。如果您有机械硬盘驱动器 (HDD)，则至少需要 8 GB 的 RAM 用作缓存。否则，您可能会发现您的系统太慢而无法完全跟上和同步。

### 最少规格要求

+ CPU在两核以上
+ 至少有300GB的空余磁盘空间
+ SSD 最低 4 GB RAM，如果有 HDD，则 8 GB 以上
+ 8 MBit/秒下载互联网服务

这些是同步基于以太坊的区块链的完整（但经过修剪）副本的最低要求。

在编写 Parity 代码库时，资源占用较少，因此如果您在有限的硬件上运行，您可能会看到使用 Parity 的更好结果。

如果你想在合理的时间内同步并存储我们在本书中讨论的所有开发工具、库、客户端和区块链，你将需要一台功能更强大的计算机。


### 推荐规格


+ 具有 4 个以上内核的快速 CPU
+ 16 GB+ 内存
+ 具有至少 500 GB 可用空间的快速 SSD
+ 25+ MBit/sec 下载互联网服务


很难预测区块链的大小增加的速度以及何时需要更多的磁盘空间，因此建议在开始同步之前检查区块链的最新大小。

> 注意: 此处列出的磁盘大小要求假设您将运行一个具有默认设置的节点，其中区块链被“修剪”了旧状态数据。如果您改为运行一个完整的“存档”节点，其中所有状态都保存在磁盘上，则可能需要超过 1 TB 的磁盘空间。


这些链接提供了区块链大小的最新估计：

+ [Ethereum](https://bitinfocharts.com/ethereum/)
+ [Ethereum Classic](https://bitinfocharts.com/ethereum%20classic/)


### 构建和运行客户端（节点）的软件要求

本节介绍 Parity 和 Geth 客户端软件。它还假设您使用的是类 Unix 命令行环境。这些示例显示了在运行 bash shell（命令行执行环境）的 Ubuntu GNU/Linux 操作系统上出现的命令和输出。

通常，每个区块链都会有自己的 Geth 版本，而 Parity 为具有相同客户端下载的多个基于以太坊的区块链（Ethereum、Ethereum Classic、Ellaism、Expanse、Musicoin）提供支持。

> 提示:在本章的许多示例中，我们将使用操作系统的命令行界面（也称为“shell”），通过“终端”应用程序访问。外壳将显示提示；您键入一个命令，shell 会以一些文本和下一个命令的新提示符进行响应。该提示在您的系统上可能看起来不同，但在以下示例中，它由 $ 符号表示。在示例中，当您看到 $ 符号后的文本时，不要键入 $ 符号，而是紧跟其后键入命令（以粗体显示），然后按 Enter 键执行该命令。在示例中，每个命令下方的行是操作系统对该命令的响应。当你看到下一个 $ 前缀时，你就会知道这是一个新命令，你应该重复这个过程。


在我们开始之前，您可能需要安装一些软件。如果您从未在当前使用的计算机上进行过任何软件开发，则可能需要安装一些基本工具。对于下面的示例，您需要安装源代码管理系统 git； golang，Go 编程语言和标准库；和 Rust，一种系统编程语言。

可以按照 [https://git-scm.com](https://git-scm.com) 上的说明安装 Git。

可以按照 [https://golang.org](https://golang.org) 或 [https://github.com/golang/go/wiki/Ubuntu](https://github.com/golang/go/wiki/Ubuntu) 上的说明安装 Go（如果您使用的是 Ubuntu）。

> 注意:Geth 要求各不相同，但如果您坚持使用 Go 1.13 或更高版本，您应该能够编译大多数版本的 Geth。当然，您应该始终参考您选择的 Geth 风格的文档。

>安装在您的操作系统上或可从系统的包管理器中获得的 golang 版本可能比 1.13 早得多。如果是这样，请将其删除并从 [https://golang.org/](https://golang.org/) 安装最新版本。

可以按照 [https://www.rustup.rs/](https://www.rustup.rs/) 上的说明安装 Rust。

> 注意: Parity需要 Rust 版本 1.27 或更高版本。


Parity 还需要一些软件库，例如 OpenSSL 和 libudev。要在 Ubuntu 或 Debian GNU/Linux 兼容系统上安装这些，请使用以下命令：
 

    $ sudo apt-get install openssl libssl-dev libudev-dev cmake clang

对于其他操作系统，请使用操作系统的包管理器或按照 Wiki 说明安装所需的库。

现在您已经安装了 git、golang、Rust 和必要的库，就可以开始了！

## parity


Parity 是全节点以太坊客户端和 DApp 浏览器的实现。它是用系统编程语言 Rust “从头开始”编写的，旨在构建模块化、安全和可扩展的以太坊客户端。 Parity 由英国公司 Parity Tech 开发，并在 GPLv3 自由软件许可下发布。

> 注意:本书的作者之一 Gavin Wood 博士是 Parity Tech 的创始人，编写了 Parity 客户端的大部分内容。 Parity 约占已安装以太坊客户群的 25%。

要安装 Parity，您可以使用 Rust 包管理器 cargo 或从 GitHub 下载源代码。包管理器也会下载源代码，所以这两个选项之间没有太大区别。在下一节中，我们将向您展示如何自行下载和编译 Parity。

### 下载parity


Parity Wiki 提供了在不同环境和容器中构建 Parity 的说明。我们将向您展示如何从源代码构建 Parity。这假设您已经使用 rustup 安装了 Rust（请参阅构建和运行客户端（节点）的软件要求）。

首先，从 GitHub 获取源码：

     $ git clone https://github.com/paritytech/parity

然后切换到 parity 目录并使用 cargo 构建可执行文件：

     $ cd parity
     $ cargo install --path .

如果一切顺利，您应该会看到如下内容：

      $ cargo install --path .
      Installing parity-ethereum v2.7.0 (/root/parity)
      Updating crates.io index
      Updating git repository `https://github.com/paritytech/rust-ctrlc.git`
      Updating git repository `https://github.com/paritytech/app-dirs-rs`   Updating git repository

     [...]

    Compiling parity-ethereum v2.7.0 (/root/parity)
    Finished release [optimized] target(s) in 10m 16s
    Installing /root/.cargo/bin/parity
    Installed package `parity-ethereum v2.7.0 (/root/parity)` (executable `parity`)
     $


通过调用 --version 选项尝试运行parity 以查看它是否已安装：

    $ parity --version
    Parity Ethereum Client.
    version Parity-Ethereum/v2.7.0-unstable-b69a33b3a-20200124/x86_64-unknown-linux-gnu/rustc1.40.0
    Copyright 2015-2020 Parity Technologies (UK) Ltd.
    License GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html.
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.

    By Wood/Paronyan/Kotewicz/Drwięga/Volf/Greeff
    Habermeier/Czaban/Gotchac/Redman/Nikolsky
    Schoedon/Tang/Adolfsson/Silva/Palm/Hirsz et al.
    $

现在安装了 Parity，您可以同步区块链并开始使用一些基本的命令行选项。

## go-ethereum

Geth 是以太坊基金会积极开发的 Go 语言实现，因此被认为是以太坊客户端的“官方”实现。通常，每个基于以太坊的区块链都有自己的 Geth 实现。如果您正在运行 Geth，那么您需要确保使用以下存储库链接之一为您的区块链获取正确的版本：

+ [Ethereum](https://github.com/ethereum/go-ethereum)
+  [Ethereum Classic](https://github.com/etclabscore/go-ethereum)
+  [Ellaism](https://github.com/ellaism/go-ellaism)
+  [Expanse](https://github.com/expanse-org/go-expanse)
+  [Musicoin](https://github.com/Musicoin/go-musicoin)
+  [Ubiq](https://github.com/ubiq/go-ubiq)


>注意:您也可以跳过这些说明并为您选择的平台安装预编译的二进制文件。预编译版本更容易安装，可以在此处列出的任何存储库的“版本”部分找到。但是，您可以通过自己下载和编译软件来了解更多信息。

### 克隆git仓库

第一步是克隆 Git 存储库，以获取源代码的副本。

要创建所选存储库的本地克隆，请在主目录或用于开发的任何目录下使用 git 命令，如下所示：

      $ git clone <Repository Link>

当存储库被复制到本地系统时，您应该会看到进度报告：

     Cloning into 'go-ethereum'...
     remote: Enumerating objects: 86915, done.
     remote: Total 86915 (delta 0), reused 0 (delta 0), pack-reused 86915
     Receiving objects: 100% (86915/86915), 134.73 MiB | 29.30 MiB/s, done.
     Resolving deltas: 100% (57590/57590), done.

现在您有了 Geth 的本地副本，您可以为您的平台编译一个可执行文件。

### 通过源代码构建geth


要构建 Geth，请切换到下载源代码的目录并使用 make 命令：

     $ cd go-ethereum
     $ make geth

如果一切顺利，您将看到 Go 编译器构建每个组件，直到它生成 geth 可执行文件：


     build/env.sh go run build/ci.go install ./cmd/geth
     >>> /usr/local/go/bin/go install -ldflags -X main.gitCommit=58a1e13e6dd7f52a1d...
     github.com/ethereum/go-ethereum/common/hexutil
     github.com/ethereum/go-ethereum/common/math
     github.com/ethereum/go-ethereum/crypto/sha3
     github.com/ethereum/go-ethereum/rlp
     github.com/ethereum/go-ethereum/crypto/secp256k1
     github.com/ethereum/go-ethereum/common
     [...]
     github.com/ethereum/go-ethereum/cmd/utils
     github.com/ethereum/go-ethereum/cmd/geth
     Done building.
     Run "build/bin/geth" to launch geth.
     $

让我们确保 geth 在不实际启动它的情况下能工作：


     $ ./build/bin/geth version

     Geth
     Version: 1.9.11-unstable
     Git Commit: 0b284f6c6cfc6df452ca23f9454ee16a6330cb8e
     Git Commit Date: 20200123
     Architecture: amd64
     Protocol Versions: [64 63]
     Go Version: go1.13.4
     Operating System: linux
     [...]


您的 geth version 命令可能会显示略有不同的信息，但您应该会看到与此处所见非常相似的版本报告。

下一节将解释以太坊区块链初始同步的挑战。

## 基于以太坊的区块链的第一次同步

传统上，在同步以太坊区块链时，您的客户端将从一开始就下载并验证每个区块和每笔交易——即从创世区块开始。

虽然可以通过这种方式完全同步区块链，但这种类型的同步将花费很长时间并且对资源要求很高（它将需要更多的 RAM，如果你没有快速同步，确实会花费很长时间贮存）。

许多基于以太坊的区块链在 2016 年底成为拒绝服务攻击的受害者。受影响的区块链在进行完全同步时往往同步缓慢。

例如，在以太坊上，一个新客户端会快速进步，直到到达区块 2,283,397。该区块于 2016 年 9 月 18 日被开采，标志着 DoS 攻击的开始。从这个区块到区块 2,700,031（2016 年 11 月 26 日），交易的验证变得极其缓慢，内存密集型和 I/O 密集型。这导致每个区块的验证时间超过 1 分钟。以太坊使用硬分叉实施了一系列升级，以解决在 DoS 攻击中被利用的潜在漏洞。这些升级还通过删除垃圾邮件交易创建的大约 2000 万个空账户来清理区块链。

如果您使用完整验证进行同步，您的客户端会变慢并且可能需要几天甚至更长的时间来验证受 DoS 攻击影响的块。

幸运的是，大多数以太坊客户端现在默认执行“快速”同步，跳过交易的完整验证，直到它同步到区块链的尖端，然后恢复完整验证。

Geth 默认为以太坊执行快速同步。您可能需要参考其他所选以太坊链的具体说明。

Parity 也默认进行快速同步。


> 注意: Geth 只能在以空块数据库启动时进行快速同步。如果您已经在没有快速模式的情况下开始同步，则 Geth 无法切换。删除区块链数据目录并从头开始快速同步比继续完整验证同步更快。**删除区块链数据时注意不要删除任何钱包！**


## 运行 Geth 或 Parity

现在您了解了“第一次同步”的挑战，您已准备好启动以太坊客户端并同步区块链。对于 Geth 和 Parity，您可以使用 --help 选项查看所有配置参数。默认设置通常是合理的，适用于大多数用途。选择如何配置任何可选参数以满足您的需要，然后启动 Geth 或 Parity 来同步链。然后等等……

> 提示: 在具有大量 RAM 的非常快的系统上同步以太坊区块链将花费半天时间，而在较慢的系统上则需要几天时间。


##  JSON-RPC 接口


以太坊客户端提供应用程序编程接口和一组远程过程调用 (RPC) 命令，这些命令被编码为 JavaScript 对象表示法 (JSON)。您将看到它被称为 JSON-RPC API。本质上，JSON-RPC API 是一个接口，它允许我们编写使用以太坊客户端作为通往以太坊网络和区块链的网关的程序。

通常，RPC 接口在端口 8545 上作为 HTTP 服务提供。出于安全原因，默认情况下它被限制为仅接受来自本地主机（您自己计算机的 IP 地址，即 127.0.0.1）的连接。

要访问 JSON-RPC API，您可以使用专门的库（以您选择的编程语言编写）提供与每个可用 RPC 命令对应的“存根”函数调用，或者您可以手动构建 HTTP 请求并发送/接收 JSON -编码请求。您甚至可以使用通用命令行 HTTP 客户端（如 curl）来调用 RPC 接口。让我们试试看。首先，确保您已启动并运行 Geth，并使用 --rpc 配置以允许对 RPC 接口进行 HTTP 访问，然后切换到一个新的终端窗口（例如，在现有的终端窗口中使用 Ctrl-Shift-N 或 Ctrl-Shift-T终端窗口），如下所示：

     $ curl -X POST -H "Content-Type: application/json" --data \
              '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' \
    http://localhost:8545

    {"jsonrpc":"2.0","id":1,
    "result":"Geth/v1.9.11-unstable-0b284f6c-20200123/linux-amd64/go1.13.4"}


在此示例中，我们使用 curl 与地址 http://localhost:8545 建立 HTTP 连接。我们已经在运行 geth，它在端口 8545 上提供 JSON-RPC API 作为 HTTP 服务。我们指示 curl 使用 HTTP POST 命令并将内容标识为 application/json 类型。最后，我们传递一个 JSON 编码的请求作为 HTTP 请求的数据组件。我们的大多数命令行只是设置 curl 以正确建立 HTTP 连接。有趣的部分是我们发出的实际 JSON-RPC 命令：

     {"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}

JSON-RPC 请求根据 JSON-RPC 2.0 规范进行格式化。每个请求包含四个元素：

+ jsonrpc

 JSON-RPC 协议的版本。这必须正好是“2.0”。

+ method

要调用的方法的名称。

+ params

一个结构化值，其中包含在方法调用期间要使用的参数值。该成员可以省略

+ id

客户端建立的标识符，如果包含，则必须包含字符串、数字或 NULL 值。如果包含，服务器必须在响应对象中回复相同的值。该成员用于关联两个对象之间的上下文。

> 注意: 当您在单个 JSON-RPC 调用中发出多个请求时，主要使用 id 参数，这种做法称为批处理。批处理用于避免为每个请求创建新的 HTTP 和 TCP 连接的开销。例如，在以太坊环境中，如果我们想通过一个 HTTP 连接检索数千笔交易，我们将使用批处理。批处理时，您为每个请求设置不同的 id，然后将其与来自 JSON-RPC 服务器的每个响应中的 id 匹配。实现这一点的最简单方法是维护一个计数器并为每个请求递增该值。


我们收到的回复是：

     {"jsonrpc":"2.0","id":1,
     "result":"Geth/v1.9.11-unstable-0b284f6c-20200123/linux-amd64/go1.13.4"}


这告诉我们 JSON-RPC API 由 Geth 客户端版本 1.9.11 提供服务。

让我们尝试一些更有趣的东西。在下一个示例中，我们向 JSON-RPC API 请求以 wei 为单位的当前 gas 价格：


     $ curl -X POST -H "Content-Type: application/json" --data \
    '{"jsonrpc":"2.0","method":"eth_gasPrice","params":[],"id":4213}' \
    http://localhost:8545

    {"jsonrpc":"2.0","id":4213,"result":"0x430e23400"}


响应 0x430e23400 告诉我们当前的 gas 价格是 18 gwei（gigawei 或 billion wei）。如果像我们一样，您不认为是十六进制的，您可以在命令行中使用一点 bash-fu 将其转换为十进制：


    $ echo $((0x430e23400))

    18000000000


完整的 JSON-RPC API 可以在 [Ethereum wiki](https://github.com/ethereum/wiki/wiki/JSON-RPC) 上进行查看。

### Parity 的 Geth 兼容模式


Parity 有一个特殊的“Geth 兼容模式”，它提供了一个与 Geth 提供的相同的 JSON-RPC API。要在此模式下运行奇偶校验，请使用 --geth 开关：

     $ parity --geth

## 远程以太坊客户端

远程客户端提供完整客户端的一部分功能。它们不存储完整的以太坊区块链，因此它们设置起来更快，并且需要的数据存储要少得多。

这些客户端通常提供执行以下一项或多项操作的能力：

+ 在钱包中管理私钥和以太坊地址。
+ 创建、签署和广播交易。
+ 使用数据负载与智能合约交互。
+ 浏览 DApp 并与之交互。
+ 提供指向外部服务的链接，例如区块浏览器。
+ 转换以太单位并从外部来源检索汇率。
+ 将 web3 实例作为 JavaScript 对象注入到 Web 浏览器中。
+ 使用由另一个客户端提供/注入浏览器的 web3 实例。
+ 访问本地或远程以太坊节点上的 RPC 服务。

一些远程客户端，例如移动（智能手机）钱包，仅提供基本的钱包功能。其他远程客户端是成熟的 DApp 浏览器。远程客户端通常提供全节点以太坊客户端的一些功能，而无需通过连接到在其他地方运行的完整节点来同步以太坊区块链的本地副本，例如，由您在本地机器或网络服务器上，或通过他们服务器上的第三方。

让我们看看一些最流行的远程客户端及其提供的功能。

## 手机（智能手机）钱包

所有移动钱包都是远程客户端，因为智能手机没有足够的资源来运行完整的以太坊客户端。轻客户端正在开发中，并没有被以太坊普遍使用。在 Parity 的情况下，轻客户端被标记为“实验性”，可以通过使用 --light 选项运行 parity 来使用。

+ [Jaxx](https://jaxx.io/)

基于BIP-39助记词种子的多币种手机钱包，支持比特币、莱特币、以太坊、以太坊经典、ZCash、多种ERC20代币等多种货币。 Jaxx 可在 Android 和 iOS 上使用，作为浏览器插件钱包，以及作为适用于各种操作系统的桌面钱包。

+ [status](https://status.im/)

一款移动钱包和 DApp 浏览器，支持多种代币和流行的 DApp。适用于 iOS 和安卓系统。

+ [Trust wallet](https://trustwalletapp.com/)

支持以太坊和以太坊经典以及 ERC20 和 ERC223 代币的移动多币种钱包。 Trust Wallet 适用于 iOS 和 Android。

+ [Cipher Browser](https://www.cipherbrowser.com/)

一个功能齐全的支持以太坊的移动 DApp 浏览器和钱包，允许与以太坊应用程序和token集成。适用于 iOS 和安卓系统。

## 浏览器钱包


各种钱包和 DApp 浏览器可作为 Chrome 和 Firefox 等网络浏览器的插件或扩展使用。这些是在您的浏览器中运行的远程客户端。

一些比较流行的是 MetaMask、Jaxx、MyEtherWallet 和 MyCrypto。


### metamask


[以太坊基础章节] 中介绍的 MetaMask 是一个多功能的基于浏览器的钱包、RPC 客户端和基本的合约浏览器。它适用于 Chrome、Firefox、Opera 和 Brave 浏览器。

与其他浏览器钱包不同，MetaMask 将 web3 实例注入到浏览器 JavaScript 上下文中，充当连接到各种以太坊区块链（主网、Ropsten 测试网、Kovan 测试网、本地 RPC 节点等）的 RPC 客户端。注入 web3 实例并充当外部 RPC 服务的网关的能力使 MetaMask 成为对开发人员和用户来说非常强大的工具。例如，它可以与 MyEtherWallet 或 MyCrypto 结合，充当这些工具的 web3 提供程序和 RPC 网关。

### jaxx


Jaxx 在上一节中作为移动钱包介绍，也可以作为 Chrome 和 Firefox 扩展以及桌面钱包使用。

### MyEtherWallet(MEW)


MyEtherWallet 是一个基于浏览器的 JavaScript 远程客户端，它提供：

+ 通往流行硬件钱包（如 Trezor 和 Ledger）的桥梁
+ 可以连接到另一个客户端注入的 web3 实例的 web3 接口（例如，MetaMask）
+ 可以连接到以太坊完整客户端的 RPC 客户端
+ 给定合约的地址和应用程序二进制接口 (ABI)，可以与智能合约交互的基本接口
+ 一款名为 MEWConnect 的移动应用程序，可以让人们使用兼容的 Android 或 iOS 设备来存储资金，类似于硬件钱包。
+ 一个运行在 JavaScript 中的软件钱包

> 提醒:访问 MyEtherWallet 和其他基于浏览器的 JavaScript 钱包时必须非常小心，因为它们经常成为网络钓鱼的目标。始终使用书签而不是搜索引擎或链接来访问正确的 Web URL。


### MyCrypto

2018 年初，MyEtherWallet 项目分为两个相互竞争的实施，由两个独立的开发团队指导：一个“叉子”，正如在开源开发中所称的那样。这两个项目分别称为 MyEtherWallet（原始品牌）和 MyCrypto。 MyCrypto 提供与 MyEtherWallet 几乎相同的功能，但它不使用 MEWConnect，而是提供与 Parity Signer 移动应用程序的连接。与 MEWConnect 一样，Parity Signer 将密钥存储在手机上，并以与硬件钱包类似的方式与 MyCrypto 交互。


### Mist(弃用)


Mist 是第一个支持以太坊的浏览器，由以太坊基金会构建。它包含一个基于浏览器的钱包，这是 ERC20 令牌标准的第一个实现（ERC20 的作者 Fabian Vogelsteller 也是 Mist 的主要开发人员）。 Mist 也是第一个引入驼峰式校验和 (EIP-55) 的钱包。自 2019 年 3 月起，Mist 已被弃用，不应再使用。


## 总结


在本章中，我们探索了以太坊客户端。您下载、安装并同步了一个客户端，成为以太坊网络的参与者，并通过在您自己的计算机上复制区块链来为系统的健康和稳定做出贡献。